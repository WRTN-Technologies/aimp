import pulumi_aws as aws

from config import (
    AWS_ACCOUNT_ID,
    AWS_REGION,
    DEFAULT_PREFIX,
    ENV,
    S3_ACL,
    S3_TEMP_BUCKET_LIFECYCLE_RULE_IN_DAYS,
    DEFAULT_LAMBDA_STORAGE_SIZE_MB,
    LAMBDA_LOG_FORMAT,
    LAMBDA_APPLICATION_LOG_LEVEL,
    LAMBDA_SYSTEM_LOG_LEVEL,
    INDEX_BUILDER_TIMEOUT,
    INDEX_BUILD_INTERVAL,
    INDEX_BUILDER_JOB_NAME_PREFIX,
    INDEX_BUILDER_CONCURRENCY,
    QUERY_EXECUTOR_QUALIFIER,
    INDEX_REFRESHER_QUALIFIER,
    COMMAND_CONTROLLER_QUALIFIER,
    QUERY_CONTROLLER_QUALIFIER,
    FS_TEMP_PATH,
    DESIRED_MEMORY_TO_STORAGE_RATIO_STD,
    DESIRED_MEMORY_TO_STORAGE_RATIO_IA,
    MEMORY_SIZE_PER_COMPUTE_NODE_STD,
    MEMORY_SIZE_PER_COMPUTE_NODE_IA,
    WAL_PAYLOAD_SIZE_THRESHOLD,
    DEFAULT_LAMBDA_TIMEOUT,
    BULK_UPSERT_SIZE_LIMIT_MB,
    DESIRED_LAMBDA_CONCURRENCY,
    REQUEST_CONTROLLER_QUALIFIER,
    API_VERSION,
    MAX_NUM_COMPUTE_NODES_STD,
    MAX_NUM_COMPUTE_NODES_IA,
)

# EFS
EFS_BASE_NAME = f"{DEFAULT_PREFIX}-efs"
EFS_NAME = f"{EFS_BASE_NAME}-{ENV}"
EFS_MOUNT_TARGET_BASE_NAME = f"{DEFAULT_PREFIX}-efs-mount-target"
EFS_MOUNT_TARGET_NAME0 = f"{EFS_MOUNT_TARGET_BASE_NAME}-0-{ENV}"
EFS_MOUNT_TARGET_NAME1 = f"{EFS_MOUNT_TARGET_BASE_NAME}-1-{ENV}"
EFS_MOUNT_TARGET_NAME2 = f"{EFS_MOUNT_TARGET_BASE_NAME}-2-{ENV}"
EFS_ACCESS_POINT_BASE_NAME = f"{DEFAULT_PREFIX}-efs-access-point"
EFS_ACCESS_POINT_NAME = f"{EFS_ACCESS_POINT_BASE_NAME}-{ENV}"
EFS_ROOT_PATH = f"/{DEFAULT_PREFIX}-{ENV}"
EFS_MOUNT_PATH = "/mnt/efs"

# Functions
COMMAND_CONTROLLER_BASE_NAME = f"{DEFAULT_PREFIX}-command-controller"
COMMAND_CONTROLLER_NAME = f"{COMMAND_CONTROLLER_BASE_NAME}-{ENV}"
COMMAND_CONTROLLER_ROLE_NAME = f"{COMMAND_CONTROLLER_BASE_NAME}-role-{ENV}"
COMMAND_CONTROLLER_POLICY_NAME = f"{COMMAND_CONTROLLER_BASE_NAME}-policy-{ENV}"
COMMAND_CONTROLLER_ALIAS_NAME = f"{COMMAND_CONTROLLER_BASE_NAME}-alias-{ENV}"
COMMAND_CONTROLLER_LOG_GROUP_NAME = f"{COMMAND_CONTROLLER_BASE_NAME}-log-group-{ENV}"

QUERY_EXECUTOR_BASE_NAME = f"{DEFAULT_PREFIX}-query-executor"
QUERY_EXECUTOR_BASE_NAME_STD = f"{QUERY_EXECUTOR_BASE_NAME}-std"
QUERY_EXECUTOR_BASE_NAME_IA = f"{QUERY_EXECUTOR_BASE_NAME}-ia"
QUERY_EXECUTOR_NAME_STD = f"{QUERY_EXECUTOR_BASE_NAME_STD}-{ENV}"
QUERY_EXECUTOR_NAME_IA = f"{QUERY_EXECUTOR_BASE_NAME_IA}-{ENV}"
QUERY_EXECUTOR_ROLE_NAME = f"{QUERY_EXECUTOR_BASE_NAME}-role-{ENV}"
QUERY_EXECUTOR_POLICY_NAME = f"{QUERY_EXECUTOR_BASE_NAME}-policy-{ENV}"
QUERY_EXECUTOR_ALIAS_NAME_STD = f"{QUERY_EXECUTOR_BASE_NAME_STD}-alias-{ENV}"
QUERY_EXECUTOR_ALIAS_NAME_IA = f"{QUERY_EXECUTOR_BASE_NAME_IA}-alias-{ENV}"
QUERY_EXECUTOR_LOG_GROUP_NAME_STD = f"{QUERY_EXECUTOR_BASE_NAME_STD}-log-group-{ENV}"
QUERY_EXECUTOR_LOG_GROUP_NAME_IA = f"{QUERY_EXECUTOR_BASE_NAME_IA}-log-group-{ENV}"

REQUEST_CONTROLLER_BASE_NAME = f"{DEFAULT_PREFIX}-request-controller"
REQUEST_CONTROLLER_NAME = f"{REQUEST_CONTROLLER_BASE_NAME}-{ENV}"
REQUEST_CONTROLLER_ROLE_NAME = f"{REQUEST_CONTROLLER_BASE_NAME}-role-{ENV}"
REQUEST_CONTROLLER_POLICY_NAME = f"{REQUEST_CONTROLLER_BASE_NAME}-policy-{ENV}"
REQUEST_CONTROLLER_ALIAS_NAME = f"{REQUEST_CONTROLLER_BASE_NAME}-alias-{ENV}"
REQUEST_CONTROLLER_LOG_GROUP_NAME = f"{REQUEST_CONTROLLER_BASE_NAME}-log-group-{ENV}"

QUERY_CONTROLLER_BASE_NAME = f"{DEFAULT_PREFIX}-query-controller"
QUERY_CONTROLLER_NAME = f"{QUERY_CONTROLLER_BASE_NAME}-{ENV}"
QUERY_CONTROLLER_ROLE_NAME = f"{QUERY_CONTROLLER_BASE_NAME}-role-{ENV}"
QUERY_CONTROLLER_POLICY_NAME = f"{QUERY_CONTROLLER_BASE_NAME}-policy-{ENV}"
QUERY_CONTROLLER_ALIAS_NAME = f"{QUERY_CONTROLLER_BASE_NAME}-alias-{ENV}"
QUERY_CONTROLLER_LOG_GROUP_NAME = f"{QUERY_CONTROLLER_BASE_NAME}-log-group-{ENV}"

INDEX_REFRESHER_BASE_NAME = f"{DEFAULT_PREFIX}-index-refresher"
INDEX_REFRESHER_NAME = f"{INDEX_REFRESHER_BASE_NAME}-{ENV}"
INDEX_REFRESHER_ROLE_NAME = f"{INDEX_REFRESHER_BASE_NAME}-role-{ENV}"
INDEX_REFRESHER_POLICY_NAME = f"{INDEX_REFRESHER_BASE_NAME}-policy-{ENV}"
INDEX_REFRESHER_ALIAS_NAME = f"{INDEX_REFRESHER_BASE_NAME}-alias-{ENV}"
INDEX_REFRESHER_LOG_GROUP_NAME = f"{INDEX_REFRESHER_BASE_NAME}-log-group-{ENV}"

ALERTER_BASE_NAME = f"{DEFAULT_PREFIX}-alerter"
ALERTER_NAME = f"{ALERTER_BASE_NAME}-{ENV}"
ALERTER_ROLE_NAME = f"{ALERTER_BASE_NAME}-role-{ENV}"
ALERTER_POLICY_NAME = f"{ALERTER_BASE_NAME}-policy-{ENV}"
ALERTER_ALIAS_NAME = f"{ALERTER_BASE_NAME}-alias-{ENV}"
ALERTER_LOG_GROUP_NAME = f"{ALERTER_BASE_NAME}-log-group-{ENV}"
ALERTER_OBJECT_NAME = f"{ALERTER_BASE_NAME}-object-{ENV}"

LAYER_BASE_NAME = f"{DEFAULT_PREFIX}-lambda-layer"
LAYER_NAME = f"{LAYER_BASE_NAME}-{ENV}"
LAYER_OBJECT_NAME = f"{LAYER_BASE_NAME}-object-{ENV}"
PRUNE_LAYER_NAME = f"{LAYER_BASE_NAME}-prune-{ENV}"
LAMBDA_RUNTIME_CONFIG = aws.lambda_.Runtime.CUSTOM_AL2023
LAMBDA_INSIGHTS_EXTENSION_ARM = (
    "arn:aws:lambda:ap-northeast-2:580247275435:layer:LambdaInsightsExtension-Arm64:19"
)

LAMBDA_ARM_ARCHITECTURE = "arm64"
LAMBDA_X86_ARCHITECTURE = "x86_64"

LOG_CONFIG = aws.lambda_.FunctionLoggingConfigArgs(
    log_format=LAMBDA_LOG_FORMAT,
    application_log_level=LAMBDA_APPLICATION_LOG_LEVEL,
    system_log_level=LAMBDA_SYSTEM_LOG_LEVEL,
)

DEFAULT_STORAGE_CONFIG = aws.lambda_.FunctionEphemeralStorageArgs(
    size=DEFAULT_LAMBDA_STORAGE_SIZE_MB
)

TRACING_CONFIG = aws.lambda_.FunctionTracingConfigArgs(mode="Active")

# Scheduler
SCHEDULER_BASE_NAME = f"{DEFAULT_PREFIX}-scheduler"
SCHEDULER_ROLE_NAME = f"{SCHEDULER_BASE_NAME}-role-{ENV}"
SCHEDULER_POLICY_NAME = f"{SCHEDULER_BASE_NAME}-policy-{ENV}"

# Lambda
BASE_LAMBDA_ARN = f"arn:aws:lambda:{AWS_REGION}:{AWS_ACCOUNT_ID}:function"
BASE_LAMBDA_RESOURCES = f"{BASE_LAMBDA_ARN}:{DEFAULT_PREFIX}*"
DEFAULT_LAMBDA_HANDLER = (
    "io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest"
)

# DynamoDB
PROJECTS_TABLE_NAME = f"{DEFAULT_PREFIX}-projects-{ENV}"
INDEXES_TABLE_NAME = f"{DEFAULT_PREFIX}-indexes-{ENV}"
DELETED_INDEXES_TABLE_NAME = f"{DEFAULT_PREFIX}-deleted-indexes-{ENV}"

BILLING_MODE = "PAY_PER_REQUEST"
if ENV == "prod":
    DELETION_PROTECTION = True
else:
    DELETION_PROTECTION = False

PROJECT_HASH_KEY = "id"
PROJECT_ATTRIBUTES_CONFIG = [
    aws.dynamodb.TableAttributeArgs(name=PROJECT_HASH_KEY, type="S")
]

INDEX_HASH_KEY = "projectId"
INDEX_RANGE_KEY = "indexName"
INDEX_ATTRIBUTES_CONFIG = [
    aws.dynamodb.TableAttributeArgs(name=INDEX_HASH_KEY, type="S"),
    aws.dynamodb.TableAttributeArgs(name=INDEX_RANGE_KEY, type="S"),
]

DELETED_INDEX_HASH_KEY = "id"
DELETED_INDEX_ATTRIBUTES_CONFIG = [
    aws.dynamodb.TableAttributeArgs(name=DELETED_INDEX_HASH_KEY, type="S"),
]

# Admin Account
ADMIN_API_KEY_NAME = f"{DEFAULT_PREFIX}-admin-api-key-{ENV}"
ADMIN_USAGE_PLAN_NAME = f"{DEFAULT_PREFIX}-admin-usage-plan-{ENV}"
ADMIN_USAGE_PLAN_KEY_NAME = f"{DEFAULT_PREFIX}-admin-usage-plan-key-{ENV}"

# Secret Manager
SECRET_NAME = f"{DEFAULT_PREFIX}/{ENV}/adminApiKey"
SECRET_VERSION_NAME = f"{DEFAULT_PREFIX}-secret-version-{ENV}"

PROJECT_API_KEY_PREFIX = f"{DEFAULT_PREFIX}-project-api-key-{ENV}"
PROJECT_USAGE_PLAN_PREFIX = f"{DEFAULT_PREFIX}-project-usage-plan-{ENV}"

# S3
BUCKET_BASE_NAME = f"{DEFAULT_PREFIX}"
BUCKET_NAME = f"{BUCKET_BASE_NAME}-{ENV}"
BUCKET_OWNER_NAME = f"{BUCKET_BASE_NAME}-ownership-controls-{ENV}"
TEMP_BUCKET_BASE_NAME = f"{DEFAULT_PREFIX}-temp"
TEMP_BUCKET_NAME = f"{TEMP_BUCKET_BASE_NAME}-{ENV}"
TEMP_BUCKET_OWNER_NAME = f"{TEMP_BUCKET_BASE_NAME}-ownership-controls-{ENV}"
BUCKET_LIFECYCLE_NAME = f"{BUCKET_BASE_NAME}-lifecycle-{ENV}"
TEMP_BUCKET_LIFECYCLE_NAME = f"{TEMP_BUCKET_BASE_NAME}-lifecycle-{ENV}"

if S3_ACL.upper() == "PRIVATE":
    S3_ACL_CONFIG = aws.s3.CannedAcl.PRIVATE
elif S3_ACL.upper() == "PUBLIC_READ":
    S3_ACL_CONFIG = aws.s3.CannedAcl.PUBLIC_READ
elif S3_ACL.upper() == "PUBLIC_READ_WRITE":
    S3_ACL_CONFIG = aws.s3.CannedAcl.PUBLIC_READ_WRITE

S3_VERSION_CONFIG = aws.s3.BucketVersioningArgs(
    enabled=True,
)

S3_DEFAULT_VERSION_CONFIG = aws.s3.BucketVersioningArgs(
    enabled=False,
)

S3_DEFAULT_OWNER_RULE_CONFIG = aws.s3.BucketOwnershipControlsRuleArgs(
    object_ownership="ObjectWriter"
)

S3_BUCKET_LIFECYCLE_RULE = [
    aws.s3.BucketLifecycleConfigurationV2RuleArgs(
        id=f"versioned-bucket-lifecycle-{ENV}",
        status="Enabled",
        # noncurrent_version_expiration=aws.s3.BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationArgs(
        #     noncurrent_days=S3_NONCURRENT_VERSION_EXPIRATION_IN_DAYS
        # ),
        noncurrent_version_transitions=[
            aws.s3.BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs(
                # noncurrent_days=S3_NONCURRENT_VERSION_INTELLIGENT_TIERING_TRANSITION_IN_DAYS,
                storage_class="INTELLIGENT_TIERING",
            )
        ],
        transitions=[
            aws.s3.BucketLifecycleConfigurationV2RuleTransitionArgs(
                storage_class="INTELLIGENT_TIERING",
            )
        ],
        filter=aws.s3.BucketLifecycleConfigurationV2RuleFilterArgs(),
    )
]

S3_TEMP_BUCKET_LIFECYCLE_RULE = [
    aws.s3.BucketLifecycleConfigurationV2RuleArgs(
        id=f"temp-bucket-lifecycle-{ENV}",
        expiration=aws.s3.BucketLifecycleConfigurationV2RuleExpirationArgs(
            days=S3_TEMP_BUCKET_LIFECYCLE_RULE_IN_DAYS,
        ),
        status="Enabled",
        filter=aws.s3.BucketLifecycleConfigurationV2RuleFilterArgs(),
    ),
]

# SQS
BASE_QUEUE_URL = f"https://sqs.{AWS_REGION}.amazonaws.com/{AWS_ACCOUNT_ID}"
BASE_QUEUE_ARN = f"arn:aws:sqs:{AWS_REGION}:{AWS_ACCOUNT_ID}"
BASE_QUEUE_RESOURCES = f"{BASE_QUEUE_ARN}:{DEFAULT_PREFIX}*"
CONTROL_QUEUE_NAME = f"{DEFAULT_PREFIX}-control-queue-{ENV}"
CONTROL_QUEUE_EVENT_SOURCE_MAPPING_NAME = (
    f"{DEFAULT_PREFIX}-control-queue-event-source-mapping-{ENV}"
)

# EventBridge Scheduler
SCHEDULER_BASE_NAME = f"{DEFAULT_PREFIX}"
INDEX_BUILD_SCHEDULE_NAME = f"{SCHEDULER_BASE_NAME}-index-build-schedule-{ENV}"
INDEX_RESCHED_SCHEDULE_NAME = f"{SCHEDULER_BASE_NAME}-index-resched-schedule-{ENV}"
LAMBDA_WARMUP_SCHEDULE_NAME = f"{SCHEDULER_BASE_NAME}-lambda-warmup-schedule-{ENV}"
SCHEDULE_GROUP_NAME = f"{SCHEDULER_BASE_NAME}-schedule-group-{ENV}"

FLEXIBLE_TIME_WINDOW_OFF_MODE = aws.scheduler.ScheduleFlexibleTimeWindowArgs(mode="OFF")

DEFAULT_SCHEDULE_EXPRESSION = "rate(1 minute)"
FIVE_MIN_SCHEDULE_EXPRESSION = "rate(5 minute)"

# Batch
INDEX_BUILDER_BASE_NAME = f"{DEFAULT_PREFIX}-index-builder"
INDEX_BUILDER_NAME = f"{INDEX_BUILDER_BASE_NAME}-{ENV}"
INDEX_BUILDER_ROLE_NAME = f"{INDEX_BUILDER_BASE_NAME}-role-{ENV}"
INDEX_BUILDER_POLICY_NAME = f"{INDEX_BUILDER_BASE_NAME}-policy-{ENV}"
INDEX_BUILDER_JOB_DEFINITION_NAME = (
    f"{INDEX_BUILDER_BASE_NAME}-job-definition-{ENV}"
)
INDEX_BUILDER_JOB_QUEUE_NAME = f"{INDEX_BUILDER_BASE_NAME}-job-queue-{ENV}"
INDEX_BUILDER_ECR_REPO_NAME = f"{INDEX_BUILDER_BASE_NAME}-ecr-{ENV}"
INDEX_BUILDER_ECR_LIFE_CYCLE_POLICY_NAME = (
    f"{INDEX_BUILDER_BASE_NAME}-ecr-lifecycle-policy-{ENV}"
)
INDEX_BUILDER_ECR_IMAGE_NAME = f"{INDEX_BUILDER_BASE_NAME}-image-{ENV}"
INDEX_BUILDER_LOG_GROUP_NAME = f"{INDEX_BUILDER_BASE_NAME}-log-group-{ENV}"
INDEX_BUILDER_SPOT_COMPUTE_ENVIRONMENT_NAME = (
    f"{INDEX_BUILDER_BASE_NAME}-spot-compute-{ENV}"
)
INDEX_BUILDER_COMPUTE_ENVIRONMENT_NAME = f"{INDEX_BUILDER_BASE_NAME}-compute-{ENV}"

BATCH_ARM_ARCHITECTURE = "ARM64"
BATCH_X86_ARCHITECTURE = "X86_64"

# API Gateway
API_GATEWAY_BASE_NAME = f"{DEFAULT_PREFIX}-api-gateway"
API_GATEWAY_NAME = f"{API_GATEWAY_BASE_NAME}-{ENV}"
API_GATEWAY_NAME_PRIVATE = f"{API_GATEWAY_BASE_NAME}-private-{ENV}"
API_GATEWAY_LOG_GROUP_NAME = f"{API_GATEWAY_BASE_NAME}-log-group-{ENV}"
API_GATEWAY_STAGE_NAME = f"{API_GATEWAY_BASE_NAME}-stage-{API_VERSION}-{ENV}"
API_GATEWAY_DEPLOYMENT_NAME = f"{API_GATEWAY_BASE_NAME}-deployment-{API_VERSION}-{ENV}"

API_GATEWAY_ENDPOINT_NAME = f"{DEFAULT_PREFIX}-api-gateway-endpoint-{ENV}"
API_GATEWAY_DEV_ENDPOINT_NAME = f"{DEFAULT_PREFIX}-api-gateway-dev-endpoint-{ENV}"
API_GATEWAY_PROD_ENDPOINT_NAME = f"{DEFAULT_PREFIX}-api-gateway-prod-endpoint-{ENV}"

QUERY_EXECUTOR_ENV = aws.lambda_.FunctionEnvironmentArgs(
    variables={
        "INDEX_BUCKET": BUCKET_NAME,
        "AIMP_AWS_REGION": AWS_REGION,
        "FS_TEMP_PATH": FS_TEMP_PATH,
        "WAL_PAYLOAD_SIZE_THRESHOLD": WAL_PAYLOAD_SIZE_THRESHOLD,
        "DISABLE_SIGNAL_HANDLERS": "true",
        "QUARKUS_LAMBDA_HANDLER": QUERY_EXECUTOR_QUALIFIER,
    }
)

INDEX_REFRESHER_ENV = aws.lambda_.FunctionEnvironmentArgs(
    variables={
        "FS_TEMP_PATH": FS_TEMP_PATH,
        "EFS_MOUNT_PATH": EFS_MOUNT_PATH,
        "DISABLE_SIGNAL_HANDLERS": "true",
        "QUARKUS_LAMBDA_HANDLER": INDEX_REFRESHER_QUALIFIER,
        "AIMP_AWS_REGION": AWS_REGION,
        "TEMP_BUCKET": TEMP_BUCKET_NAME,
        "QUERY_EXECUTOR_BASE_NAME_STD": QUERY_EXECUTOR_NAME_STD,
        "QUERY_EXECUTOR_BASE_NAME_IA": QUERY_EXECUTOR_NAME_IA,
        "QUERY_EXECUTOR_QUALIFIER": QUERY_EXECUTOR_QUALIFIER
    }
)

REQUEST_CONTROLLER_ENV = aws.lambda_.FunctionEnvironmentArgs(
    variables={
        "ADMIN_API_KEY_SECRET_NAME": SECRET_NAME,
        "PROJECT_TABLE_NAME": PROJECTS_TABLE_NAME,
        "INDEX_TABLE_NAME": INDEXES_TABLE_NAME,
        "DELETED_INDEX_TABLE_NAME": DELETED_INDEXES_TABLE_NAME,
        "INDEX_BUCKET": BUCKET_NAME,
        "TEMP_BUCKET": TEMP_BUCKET_NAME,
        "AIMP_AWS_REGION": AWS_REGION,
        "CONTROL_QUEUE_URL": f"{BASE_QUEUE_URL}/{CONTROL_QUEUE_NAME}",
        "WAL_PAYLOAD_SIZE_THRESHOLD": WAL_PAYLOAD_SIZE_THRESHOLD,
        "EFS_MOUNT_PATH": EFS_MOUNT_PATH,
        "DISABLE_SIGNAL_HANDLERS": "true",
        "QUARKUS_LAMBDA_HANDLER": REQUEST_CONTROLLER_QUALIFIER,
        "DEFAULT_LAMBDA_TIMEOUT": DEFAULT_LAMBDA_TIMEOUT,
        "BULK_UPSERT_SIZE_LIMIT_MB": BULK_UPSERT_SIZE_LIMIT_MB,
        "PROJECT_USAGE_PLAN_PREFIX": PROJECT_USAGE_PLAN_PREFIX,
    }
)

QUERY_CONTROLLER_ENV = aws.lambda_.FunctionEnvironmentArgs(
    variables={
        "PROJECT_TABLE_NAME": PROJECTS_TABLE_NAME,
        "INDEX_TABLE_NAME": INDEXES_TABLE_NAME,
        "DELETED_INDEX_TABLE_NAME": DELETED_INDEXES_TABLE_NAME,
        "INDEX_BUCKET": BUCKET_NAME,
        "AIMP_AWS_REGION": AWS_REGION,
        "QUERY_EXECUTOR_BASE_NAME_STD": QUERY_EXECUTOR_NAME_STD,
        "QUERY_EXECUTOR_BASE_NAME_IA": QUERY_EXECUTOR_NAME_IA,
        "QUERY_EXECUTOR_QUALIFIER": QUERY_EXECUTOR_QUALIFIER,
        "INDEX_REFRESHER_NAME": INDEX_REFRESHER_NAME,
        "INDEX_REFRESHER_QUALIFIER": INDEX_REFRESHER_QUALIFIER,
        "DISABLE_SIGNAL_HANDLERS": "true",
        "QUARKUS_LAMBDA_HANDLER": QUERY_CONTROLLER_QUALIFIER,
    }
)

COMMAND_CONTROLLER_ENV = aws.lambda_.FunctionEnvironmentArgs(
    variables={
        "PROJECT_TABLE_NAME": PROJECTS_TABLE_NAME,
        "INDEX_TABLE_NAME": INDEXES_TABLE_NAME,
        "DELETED_INDEX_TABLE_NAME": DELETED_INDEXES_TABLE_NAME,
        "INDEX_BUCKET": BUCKET_NAME,
        "TEMP_BUCKET": TEMP_BUCKET_NAME,
        "AIMP_AWS_REGION": AWS_REGION,
        "CONTROL_QUEUE_URL": f"{BASE_QUEUE_URL}/{CONTROL_QUEUE_NAME}",
        "INDEX_BUILDER_TIMEOUT": INDEX_BUILDER_TIMEOUT,
        "INDEX_BUILD_INTERVAL": INDEX_BUILD_INTERVAL,
        "QUERY_EXECUTOR_BASE_NAME_STD": QUERY_EXECUTOR_NAME_STD,
        "QUERY_EXECUTOR_BASE_NAME_IA": QUERY_EXECUTOR_NAME_IA,
        "MAX_NUM_COMPUTE_NODES_STD": MAX_NUM_COMPUTE_NODES_STD,
        "MAX_NUM_COMPUTE_NODES_IA": MAX_NUM_COMPUTE_NODES_IA,
        "DESIRED_MEMORY_TO_STORAGE_RATIO_STD": DESIRED_MEMORY_TO_STORAGE_RATIO_STD,
        "DESIRED_MEMORY_TO_STORAGE_RATIO_IA": DESIRED_MEMORY_TO_STORAGE_RATIO_IA,
        "INDEX_BUILDER_JOB_DEFINITION_NAME": INDEX_BUILDER_JOB_DEFINITION_NAME,
        "INDEX_BUILDER_JOB_QUEUE_NAME": INDEX_BUILDER_JOB_QUEUE_NAME,
        "INDEX_BUILDER_JOB_NAME_PREFIX": INDEX_BUILDER_JOB_NAME_PREFIX,
        "MEMORY_SIZE_PER_COMPUTE_NODE_STD": MEMORY_SIZE_PER_COMPUTE_NODE_STD,
        "MEMORY_SIZE_PER_COMPUTE_NODE_IA": MEMORY_SIZE_PER_COMPUTE_NODE_IA,
        "QUERY_EXECUTOR_QUALIFIER": QUERY_EXECUTOR_QUALIFIER,
        "EFS_MOUNT_PATH": EFS_MOUNT_PATH,
        "DISABLE_SIGNAL_HANDLERS": "true",
        "QUARKUS_LAMBDA_HANDLER": COMMAND_CONTROLLER_QUALIFIER,
        "DEFAULT_LAMBDA_TIMEOUT": DEFAULT_LAMBDA_TIMEOUT,
        "DESIRED_LAMBDA_CONCURRENCY": DESIRED_LAMBDA_CONCURRENCY,
        "REQUEST_CONTROLLER_NAME": REQUEST_CONTROLLER_NAME,
        "REQUEST_CONTROLLER_QUALIFIER": REQUEST_CONTROLLER_QUALIFIER,
        "PROJECT_API_KEY_PREFIX": PROJECT_API_KEY_PREFIX,
        "PROJECT_USAGE_PLAN_PREFIX": PROJECT_USAGE_PLAN_PREFIX,
        "API_VERSION": API_VERSION,
        "API_GATEWAY_NAME": API_GATEWAY_NAME,
        "API_GATEWAY_NAME_PRIVATE": API_GATEWAY_NAME_PRIVATE,
    }
)

BATCH_ENVIRONMENT_CONFIG = [
    {
        "name": "JAVA_TOOL_OPTIONS",
        "value": (
            "-XX:InitialRAMPercentage=50.0 "
            "-XX:MaxRAMPercentage=50.0 "
            "-XX:+TieredCompilation "
            "--enable-native-access=ALL-UNNAMED "
            # "-XX:+UseG1GC "
            "-XX:+UseZGC "
            "-XX:+ZGenerational "
            "-XX:-ZUncommit "
            # "-XX:+UseLargePages -XX:+UseTransparentHugePages "
            "--add-modules=jdk.incubator.vector "
            "-Djava.util.logging.manager=org.jboss.logmanager.LogManager"
        ),
    },
    {"name": "PROJECT_TABLE_NAME", "value": PROJECTS_TABLE_NAME},
    {"name": "INDEX_TABLE_NAME", "value": INDEXES_TABLE_NAME},
    {"name": "DELETED_INDEX_TABLE_NAME", "value": DELETED_INDEXES_TABLE_NAME},
    {"name": "INDEX_BUCKET", "value": BUCKET_NAME},
    {"name": "TEMP_BUCKET", "value": TEMP_BUCKET_NAME},
    {"name": "AIMP_AWS_REGION", "value": AWS_REGION},
    {"name": "INDEX_BUILDER_TIMEOUT", "value": INDEX_BUILDER_TIMEOUT},
    {"name": "INDEX_BUILD_INTERVAL", "value": INDEX_BUILD_INTERVAL},
    {"name": "FS_TEMP_PATH", "value": FS_TEMP_PATH},
    {"name": "EFS_MOUNT_PATH", "value": EFS_MOUNT_PATH},
    {"name": "DEFAULT_LAMBDA_TIMEOUT", "value": DEFAULT_LAMBDA_TIMEOUT},
    {"name": "INDEX_BUILDER_CONCURRENCY", "value": INDEX_BUILDER_CONCURRENCY},
]

ROUTES = [
    {"path": "/projects", "method": "POST"},
    {"path": "/projects", "method": "GET"},
    {"path": "/projects/{projectId}", "method": "GET"},
    {"path": "/projects/{projectId}", "method": "DELETE"},
    {"path": "/projects/{projectId}", "method": "PATCH"},
    {"path": "/projects/{projectId}/indexes", "method": "POST"},
    {"path": "/projects/{projectId}/indexes", "method": "GET"},
    {"path": "/projects/{projectId}/indexes/{indexName}", "method": "GET"},
    {"path": "/projects/{projectId}/indexes/{indexName}", "method": "DELETE"},
    {"path": "/projects/{projectId}/indexes/{indexName}", "method": "PATCH"},
    {
        "path": "/projects/{projectId}/indexes/{indexName}/docs/upsert",
        "method": "POST",
    },
    {
        "path": "/projects/{projectId}/indexes/{indexName}/docs/delete",
        "method": "POST",
    },
    {
        "path": "/projects/{projectId}/indexes/{indexName}/docs/bulk-upsert",
        "method": "GET",
    },
    {
        "path": "/projects/{projectId}/indexes/{indexName}/docs/bulk-upsert",
        "method": "POST",
    },
]

QUERY_ROUTES = [
    {
        "path": "/projects/{projectId}/indexes/{indexName}/query",
        "method": "POST",
    },
    {
        "path": "/projects/{projectId}/indexes/{indexName}/docs/fetch",
        "method": "POST",
    },
]
